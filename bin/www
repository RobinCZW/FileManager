#!/usr/bin/env node

var cluster = require('cluster');
var numCPUs = require('os').cpus().length;

var models = require('../models');
var app = require('../app');
var http = require('http');
var config = require('../config/config');

var port = config.bindPort;
app.set('port', port);

if (config.cluster && cluster.isMaster && !config.debug) {
  var i;
  for (i=0; i<numCPUs; i++) {
    cluster.fork();
  }
  cluster.on('exit', function(worker, code, signal) {
    console.log('worker ' + worker.process.pid + ' died');
  });
  cluster.on('listening', function(worker, address) {  
    console.log("A worker with #"+worker.id+" is now connected to " +
     address.address +
    ":" + address.port);  
  });
} else {
  var server = http.createServer(app);
  models.sequelize.sync().then(function (){
    server.listen(port, config.bindAddr);
    server.on('error', onError);
    server.on('listening', onListening);
  });
}




function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
